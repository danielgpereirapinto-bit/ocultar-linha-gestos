package com.example.hideline

import android.os.Bundle
import android.widget.Button
import android.widget.Toast
import androidx.appcompat.app.AppCompatActivity
import rikka.shizuku.Shizuku
import rikka.shizuku.Shizuku.OnRequestPermissionResultListener
import java.io.BufferedReader
import java.io.InputStreamReader
import android.content.pm.PackageManager

class MainActivity : AppCompatActivity(), OnRequestPermissionResultListener {

    private val REQUEST_CODE = 1000

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        val btnHide = findViewById<Button>(R.id.btn_hide)
        val btnRestore = findViewById<Button>(R.id.btn_restore)

        btnHide.setOnClickListener {
            ensureShizukuAndRun { setHideGestureLine(1) }
        }

        btnRestore.setOnClickListener {
            ensureShizukuAndRun { setHideGestureLine(0) }
        }
    }

    private fun ensureShizukuAndRun(action: () -> Unit) {
        when {
            Shizuku.isPreV11() -> {
                Toast.makeText(this, "Shizuku versão muito antiga", Toast.LENGTH_SHORT).show()
            }
            Shizuku.checkSelfPermission() == PackageManager.PERMISSION_GRANTED -> {
                action()
            }
            Shizuku.shouldShowRequestPermissionRationale() -> {
                Toast.makeText(this, "Permissão necessária para executar comandos", Toast.LENGTH_LONG).show()
                Shizuku.requestPermission(REQUEST_CODE)
            }
            else -> {
                Shizuku.addRequestPermissionResultListener(this)
                Shizuku.requestPermission(REQUEST_CODE)
            }
        }
    }

    override fun onRequestPermissionResult(requestCode: Int, grantResult: Int) {
        Shizuku.removeRequestPermissionResultListener(this)
        if (requestCode == REQUEST_CODE && grantResult == PackageManager.PERMISSION_GRANTED) {
            Toast.makeText(this, "Permissão concedida!", Toast.LENGTH_SHORT).show()
        } else {
            Toast.makeText(this, "Permissão negada. Ative o Shizuku.", Toast.LENGTH_LONG).show()
        }
    }

    private fun setHideGestureLine(value: Int) {
        try {
            val cmd = arrayOf("settings", "put", "global", "hide_gesture_line", value.toString())
            
            // Método correto para executar comandos no Shizuku
            val process = Shizuku.Runtime.exec(cmd, null, null)
            val exitCode = process.waitFor()
            
            if (exitCode == 0) {
                val successMessage = if (value == 1) "Linha ocultada" else "Linha restaurada"
                Toast.makeText(this, successMessage, Toast.LENGTH_SHORT).show()
            } else {
                val error = BufferedReader(InputStreamReader(process.errorStream))
                    .use { it.readText() }
                Toast.makeText(this, "Erro: $error", Toast.LENGTH_LONG).show()
            }
        } catch (t: Throwable) {
            Toast.makeText(this, "Falha: ${t.message}", Toast.LENGTH_LONG).show()
            t.printStackTrace()
        }
    }
}

